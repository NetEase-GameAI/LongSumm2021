{
  "blog_id": "moment-based-quantile-sketches-for-efficient-high-cardinality-aggregation-queries",
  "summary": [
    "Moment-based quantile sketches for efficient high cardinality aggregation queries Gan et al., VLDB\u201918  Today we\u2019re temporarily pausing our tour through some of the OSDI\u201918 papers in order to look at a great sketch-based data structure for quantile queries over high-cardinality aggregates.",
    "That\u2019s a bit of a mouthful so let\u2019s jump straight into an example of the problem at hand.",
    "Say you have telemetry data from millions of heterogenous mobile devices running your app.",
    "Each device tracks multiple metrics such as request latency and memory usage, and is associated with dimensional metadata (categorical variables) such as application version and hardware model.",
    "In applications such as A/B testing, exploratory data analysis, and operations monitoring, analysts perform aggregation queries to understand how specific user cohorts, device types, and feature flags are behaving.",
    "We want to be able to ask questions like \u201cwhat\u2019s the 99%-ile latency over the last two weeks for v8.2 of the app?\u201d  SELECT percentile(latency, 99) FROM requests WHERE time > date_sub(curdate(), 2 WEEK) AND app_version = \"v8.2\"  As well as threshold queries such as \u201cwhat combinations of app version and hardware platform have a 99th percentile latency exceeding 100ms?\u201d  SELECT app_version, hw_model, PERCENTILE(latency, 99) as p99 FROM requests GROUP BY app_version, hw_model HAVING p99 > 100  Instead of starting from raw data every time when answering this type of query, OLAP engines can reduce query time and memory usage by maintaining a data cube of pre-aggregated summaries for each tuple of dimension values.",
    "The ultimate query performance then depends on just how quickly we can merge those summaries to compute quantile roll-ups over the requested dimensions.",
    "Let\u2019s take a very simple example.",
    "Suppose I have two dimensions, letter (with values A and B), and colour (with values red and green), and I have request latency data from log messages including these attributes.",
    "Then I will have four summary sketches, one accumulating latency values for (A, red) one for (A, green), one for (B, red) and one for (B, green).",
    "If a query wants to know the P99 latency for \u2018red\u2019 requests, we can add together the (A, red) and (B, red) sketches to get a complete sketch for red.",
    "In this paper, we enable interactive quantile queries over high-cardinality aggregates by introducing a compact and efficiently mergeable quantile sketch and associated quantile estimation routines.",
    "The data structure than makes all this possible is called a moments sketch (named after the method of moments statistical technique).",
    "It\u2019s easy to construct, but a bit more difficult to interpret.",
    "It\u2019s worth the effort though, as the evaluation shows:  The moments sketch supports 15-50x faster query times that comparably accurate summaries on quantile aggregations  The moments sketch gives good accuracy across a range of real-world datasets using less than 200 bytes of storage  Integration of the moments sketch in Druid provides 7x faster quantile queries than the default quantile summary in Druid workloads.",
    "There\u2019s a Java implementation available at  [url]"
  ],
  "author_id": "ACOLYER",
  "pdf_url": "http://www.bailis.org/papers/moments-vldb2018.pdf",
  "author_full_name": "Adrian Colyer",
  "source_website": "https://blog.acolyer.org/about/",
  "id": 4784102
}