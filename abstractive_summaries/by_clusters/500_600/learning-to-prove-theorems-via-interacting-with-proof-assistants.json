{
  "blog_id": "learning-to-prove-theorems-via-interacting-with-proof-assistants",
  "summary": [
    "Learning to prove theorems via interacting with proof assistants Yang & Deng, ICML\u201919  Something a little different to end the week: deep learning meets theorem proving!",
    "It\u2019s been a while since we gave formal methods some love on The Morning Paper, and this paper piqued my interest.",
    "You\u2019ve probably heard of Coq , a proof management system backed by about 30 years of research and developed out of INRIA.",
    "Here\u2019s how the Coq home page introduces it:  Coq is a formal proof management system.",
    "It provides a formal language to write mathematical definitions, executable algorithms and theorems together with an environment for semi-interactive development of machine-checked proofs.",
    "Certified programs can then be extracted to languages like OCaml, Haskell, and Scheme.",
    "In fully automated theorem proving (ATP), after providing a suitable formalism and a theorem, the goal is to be able to push a button and have the system prove that the theorem is true (or false!).",
    "The state-of-the-art in ATP is still some way behind human experts though it two key areas: the scale of systems it can tackle, and the interpretability of the generated proofs.",
    "What a typical theorem prover does\u2026 is to prove by resolution refutation: it converts the premises and the negation of the theorem into first-order clauses in conjunctive normal form.",
    "It then keeps generating new clauses by applying the resolution rule until an empty clause emerges, yielding a proof consisting of a long sequence of CNFs and resolutions.",
    "Enter interactive theorem proving (ITP).",
    "In ITP a human expert guides the structure of the proof, telling the system which proof tactics to use at each step:  The tactics capture high-level proof techniques such as induction, leaving low-level details to the software referred to as proof assistants.",
    "( Enlarge )  It would be nice if we could learn from all the ITP proofs that humans have generated, and use those learnings to improve the proof steps that a system can take automatically:  \u2026 human experts have written a large amount of ITP code, which provides an opportunity to develop machine learning systems to imitate humans for interacting with the proof assistant.",
    "Such a combination would get us closer to fully automated human-like proofs.",
    "To pull all this together we need three things:  A large ITP dataset we can learn from  A learning environment for training and evaluating auto-ITP agents.",
    "Agents start with a set of premises and a theorem to prove, and then they interact with the proof assistant by issuing a sequence of tactics.",
    "A way to learn and generate new tactics which can be used in the construction of those proofs.",
    "The first two requirements are satisfied by CoqGym, and ASTactic handles tactic generation.",
    "CoqGym  CoqGym (  [url]"
  ],
  "author_id": "ACOLYER",
  "pdf_url": "http://proceedings.mlr.press/v97/yang19a/yang19a.pdf",
  "author_full_name": "Adrian Colyer",
  "source_website": "https://blog.acolyer.org/about/",
  "id": 24510148
}