{
  "blog_id": "veritas-shared-verifiable-databases-and-tables-in-the-cloud",
  "summary": [
    "Veritas: shared verifiable databases and tables in the cloud Allen et al., CIDR\u201919  Two (or more) parties want to transact based on the sharing of information (e.g. current offers).",
    "In order to have trust in the system and provide a foundation for resolving disputes, we\u2019d like a tamperproof and immutable audit log of all shared data and actions, such that an independent auditor can reconstruct the state of the system at any point in time.",
    "Enter the blockchain?!",
    "Not so fast say Allen et al., blockchain technology as we know it today is \u2018 one step forward, two steps back \u2019 ;).",
    "Today, for gaining immutability and auditability with new blockchain platforms, we give up decades of research in data management\u2014 and hardened, enterprise-ready code that implements these ideas.",
    "We\u2019d still like to be able to use SQL for example.",
    "We want transaction throughput much closer to a traditional database, and we want to take advantage of query optimisation and sophisticated query processing engines.",
    "We could try adding database like features to blockchain systems, but that looks to be a long road:  There are now a gazillion start-ups that are adding these basic database features to blockchains, but it will take years if not decades to catch up.",
    "How about trying it the other way round then?",
    "Start with a mature database system, and add a sprinkling of blockchain?",
    "Instead of adding database capabilities to blockchains, we propose to address the problem from the opposite approach: we add trust and auditability to existing database management systems.",
    "The key notions in the paper are verifiable databases and verifiable tables.",
    "A verifiable database has all the features of a regular database, but in addition it supports tamper-evident collaboration across mutually untrusted entities.",
    "The idea of a shared verifiable table goes one step further: integrating a special table directly into the existing databases of the transacting parties.",
    "The same instance of the table is visible to all parties, and all activities are written to a tamper-proof log.",
    "There is an N:1 relationship between shared tables and tamper-proof logs.",
    "Verifiable databases (and tables) provide a set of cryptographic guarantees:  each party can verify the actions (updates) of all other parties and provide proof of its own actions  all parties can verify that the state of the shared database (or table) and its responses to queries is consistent with the prior actions of legitimate actors  unauthorized parties (hackers or operators with administrative privileges) cannot tamper with the state of the verifiable database (table) without being detected by the verification mechanism  So we\u2019re looking at a permissioned system supporting a set of verifiers.",
    "The assumption in this work is that verifiers have access to the full log.",
    "Confidentiality is an orthogonal concern that could be addressed by frameworks such as Coco , Quorum , Spice , or [Corda](  [url]"
  ],
  "author_id": "ACOLYER",
  "pdf_url": "http://cidrdb.org/cidr2019/papers/p111-gehrke-cidr19.pdf",
  "author_full_name": "Adrian Colyer",
  "source_website": "https://blog.acolyer.org/about/",
  "id": 88548359
}