{
  "blog_id": "using-word-embedding-to-enable-semantic-queries-on-relational-databases",
  "summary": [
    "Using word embedding to enable semantic queries in relational databases Bordawekar and Shmeuli, DEEM\u201917  As I\u2019m sure some of you have figured out, I\u2019ve started to work through a collection of papers from SIGMOD\u201917.",
    "Strictly speaking, this paper comes from the DEEM workshop held in conjunction with SIGMOD, but it sparked my imagination and I hope you\u2019ll enjoy it too.",
    "Plus, as a bonus it\u2019s only four pages long!",
    "What do you get if you cross word embedding vectors with a relational database?",
    "The ability to ask a new class of queries, which the authors term cognitive intelligence (CI) queries, that ask about the semantic relationship between tokens in the database, rather than just syntactic matching as is supported by current queries.",
    "It\u2019s a really interesting example of AI infusing everyday systems.",
    "We begin with a simple observation: there is a large amount of untapped latent information within a database relation.",
    "This is intuitively clear for columns that contain unstructured text.",
    "But even columns that contain different types of data, e.g., strings, numerical values, images, dates, etc., possess significant latent information in the form of inter- and intra-column relationships.",
    "If we understood the meaning of these tokens in the database (at least in some abstract way that was comparable), we could ask queries such as \u201cshow me all the rows similar to this.\u201d That\u2019s something you can\u2019t easily do with relational databases today \u2013 excepting perhaps for range queries on specific types such as dates.",
    "Where can we get comparable abstract representations of meaning though?",
    "The answer is already given away in the paper title of course \u2013 this is exactly what word embedding vectors do for us!",
    "If you\u2019re not familiar with word embedding vectors, we covered word2vec and GloVe in The Morning Paper a while back.",
    "In fact, \u201c The Amazing Power of Word Vectors \u201d continues to be one of the most read pieces on this blog.",
    "In short:  The idea of word embedding is to fix a d-dimensional vector space and for each word in a text corpus associate a dimension d vector of reals numbers that encodes the meaning of that word\u2026 If two words have similar meaning, their word vectors point in very similar directions.",
    "The authors use word2vec in their work, though as they point out they could equally have used GloVe.",
    "How do we get word embedding vectors for database content?",
    "One approach is to use word vectors that have been pre-trained from external sources.",
    "You can also learn directly from the database itself.",
    "Think of each row as corresponding to a sentence, and a relation as a document.",
    "Word embedding then can extract latent semantic information in terms of word (and in general, token) associations and co-occurrences and encode it in word vectors.",
    "Thus, these vectors capture first inter- and intra-attribute relationships within a row (sentence) and then aggregate these relationships across the relation (document) to compute the collective semantic relationships.",
    "In their prototype implementation, the authors first textify (!)",
    "the data in a database table (e.g., using a view), and then use a modified version of word2vec to learn vectors for the words (database tokens) in the extracted text.",
    "This phase can also use an external source (e.g. Wikipedia articles) for model training.",
    "We use word as a synonym to token although some tokens may not be valid words in any natural language.",
    "Following vector training, the resultant vectors are stored in a relational system table.",
    "At runtime, the system (built on Spark using Spark SQL and the DataFrames API) uses UDFs to fetch trained vectors from the system and answer CI queries.",
    "CI Queries  Broadly, there are two classes of cognitive intelligence queries: similarity and prediction queries\u2026 The key characteristic of the CI queries is that these queries are executed, in part, using the vectors in the word embedding model.",
    "If the word embedding model is generated using the database being queried, it captures meaning in the context of the associated relational table, as specified by the relational view.",
    "If a model is rebuilt using a different relational view, a CI query may return different results for the new model.",
    "It\u2019s time to look at some concrete examples to make all this a bit clearer.",
    "Given a similarityUDF that can tell us how similar two sets of word vectors are, we can ask a query such as:  In this case, the vector sets correspond to the items purchased by the corresponding customers.",
    "What this query will return is pairs of customers that have similar purchasing histories!",
    "The pattern observed in this query can be applied to other domains as well, e.g., identifying patients that are taking similar drugs, but with different brand names or identifying food items with similar ingredients, or finding mutual funds with similar investment strategies.",
    "The key difference to a traditional query is that we\u2019re matching by semantic similarity, not by values.",
    "Recall that word embeddings also support inductive reasoning (e.g., the classic King is to Man as Queen is to ?",
    "style queries).",
    "You can exploit this capability in CI queries too.",
    "In the following toy example, we\u2019re looking for food product pairs that relate to each other as \u2018peanut-butter\u2019 relates to \u2018jelly\u2019.",
    "(For example, the query may return the pair \u2018chips\u2019, \u2018salsa\u2019).",
    "The analogyUDF computes the differences (peanut butter \u2013 jelly) and (p1 \u2013 p2) and looks at the cosine similarity of those differences.",
    "The analogy capabilities of CI queries have several applications in the enterprise space, e.g., associating customers with either most-common or least-common purchases in a given domain (e.g., books, electronics, etc.).",
    "I understand the analogy query mechanism, but I\u2019m not sure I quite get the example the authors are trying to give above.",
    "Neither finding product popularity, nor seeing whether a customer has purchased a low-popularity (high popularity) item seems to need an analogy?",
    "Here\u2019s an example of my own \u2013 recommendation by analogy: razor is to blade as [product the customer just put in their basket] is to ?.",
    "(Probably not about to replace frequent itemset mining anytime soon!)",
    "Our final example shows how embeddings trained using external data can be used in queries.",
    "Suppose we trained word embeddings with a data set that reveals information about fruits and their allergenic properties.",
    "We would have a relationship between the vector for \u2018allergenic\u2019 and the vectors for allergenic fruit names.",
    "Now we can ask:  This example demonstrates a very powerful ability of CI queries that enables users to query a database using a token (e.g., allergenic) not present in the database.",
    "The last word  Will all relational databases one day come with CI querying capabilities built-in?",
    "In summary, we believe this work is a step towards empowering database systems with built-in AI capabilities\u2026 We believe CI queries are applicable to a broad class of application domains including healthcare, bio-informatics, document searching, retail analysis, and data integration.",
    "We are currently working on applying the CI capabilities to some of these domains."
  ],
  "author_id": "ACOLYER",
  "pdf_url": "https://dl.acm.org/doi/pdf/10.1145/3076246.3076251?download=true",
  "author_full_name": "Adrian Colyer",
  "source_website": "https://blog.acolyer.org/about/",
  "id": 9563928
}