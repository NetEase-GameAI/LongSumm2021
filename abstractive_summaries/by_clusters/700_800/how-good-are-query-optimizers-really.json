{
  "blog_id": "how-good-are-query-optimizers-really",
  "summary": [
    "How good are query optimizers, really?",
    "Leis et al., VLBD 2015  Last week we looked at cardinality estimation using index-based sampling , evaluated using the Join Order Benchmark.",
    "Today\u2019s choice is the paper that introduces the Join Order Benchmark (JOB) itself.",
    "It\u2019s a great evaluation paper , and along the way we\u2019ll learn a lot about mainstream query optimisers.",
    "The evaluated databases are PostgresQL, HyPer, and three commercial databases named \u2018DBMS A\u2019, B, and C. We don\u2019t know what those databases are, but if I had to make an educated guess I\u2019d say they\u2019re likely to be SQLServer, DB/2, and Oracle (in some order) based on a few hints scattered through the paper.",
    "The goal of this paper is to investigate the contribution of all relevant query optimizer components to end-to-end query performance in a realistic setting.",
    "The heart of the paper is an investigation into the performance of industrial-strength cardinality estimators: the authors show that cardinality estimation is the most important factor in producing good query plans.",
    "Cost models (that consume those estimates) are also important, but not as significant.",
    "Finally, and perhaps unsurprisingly, the more query plans a DBMS considers, the better the overall result.",
    "PostgreSQL optimiser  For background, let\u2019s start out by looking at how the PostgreSQL query optimizer works.",
    "Cardinalities of base tables are estimated using histograms (quantile statistics), most common values with their frequencies, and domain cardinalities (distinct value counts).",
    "These per-attribute statistics are computed by the analyze command using a sample of the relation.",
    "Join sizes are estimated using:  |T1\u00a0\u22c8x=y T2| = (|T1||T2|) / max(dom(x),dom(y))  Join orders, including bushy trees but excluding trees with cross products, are enumerated using dynamic programming.",
    "The cost model used to determine which plan is cheapest is comprised of over 4000 lines of C code and takes into account many subtle factors.",
    "At the core, it combines CPU and I/O costs with certain weights.",
    "\u201cSpecifically, the cost of an operator is defined as a weighted sum of the number of accessed disk pages (both sequential and random) and the amount of data processed in memory.\u201d Setting the weights of those cost variables is a dark art.",
    "The Join Order Benchmark  Many research papers on query processing and optimization use standard benchmarks like TPC-H, TPC-DS, or the Star Schema Benchmark (SSB)\u2026 we argue they are not good benchmarks for the cardinality estimation component of query optimizers.",
    "The reason is that in order to easily be able to scale the benchmark data, the data generators are using the very same simplifying assumptions (uniformity, independence, principle of inclusion) that query optimizers make.",
    "To reinforce the point, take a look at the cardinality estimation errors in PostgreSQL for four representative queries from JOB vs three from TPC-H (note the log scale, and significant underestimation on \u2018real data\u2019 cardinalities):  The Join Order Benchmark is based on the Internet Movie Data Base (IMDB).",
    "\u201cLike most real-world data sets IMDB is full of correlations and non-uniform data distributions, and is therefore much more challenging than most synthetic data sets.\u201d  JOB consists of a total of 113 queries over IMDB, with between 3 and 16 joins per query and an average of 8.",
    "The queries all answer questions that may reasonably have been asked by a movie enthusiast.",
    "For cardinality estimators the queries are challenging due to the significant number of joins and the correlations contained in the data set.",
    "However, we did not try to \u201ctrick\u201d the query optimizer, e.g., by picking attributes with extreme correlations.",
    "The JOB query set is available online at  [url]"
  ],
  "author_id": "ACOLYER",
  "pdf_url": "http://www.vldb.org/pvldb/vol9/p204-leis.pdf",
  "author_full_name": "Adrian Colyer",
  "source_website": "https://blog.acolyer.org/about/",
  "id": 53269747
}