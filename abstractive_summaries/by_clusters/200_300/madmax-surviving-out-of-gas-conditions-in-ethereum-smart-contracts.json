{
  "blog_id": "madmax-surviving-out-of-gas-conditions-in-ethereum-smart-contracts",
  "summary": [
    "MadMax: surviving out-of-gas conditions in ethereum smart contracts Grech et al., OOPSLA\u201918  We\u2019re transitioning to look at a selection of papers from the recent OOPSLA conference this week.",
    "MadMax won a distinguished paper award, and makes a nice bridge from the CCS blockchain papers we were looking at last week.",
    "Analysis and verification of smart contracts is a high-value task, possibly more so than in any other programming setting.",
    "The combination of monetary value and public availability makes the early detection of vulnerabilities a task of paramount importance.",
    "(Detection may occur after contract deployment.",
    "Despite the code immutability, which prevents bug fixes, discovering a vulnerability before an attacker may exploit it could enable a trusted third party to move vulnerable funds to safety).",
    "MadMax is in the same vein as Securify , performing EVM bytecode analysis using Datalog (also with Souffl\u00e9 ) to infer security issues in contracts.",
    "In this instance, MadMax focuses on detecting vulnerabilities caused by out-of-gas conditions.",
    "The paper touches on some nice reusable building blocks (e.g. Vandal ).",
    "I could easily see Vandal + Souffl\u00e9 becoming a standard foundation for powerful EVM-based smart contract analysis.",
    "MadMax is available on GitHub at  [url]"
  ],
  "author_id": "ACOLYER",
  "pdf_url": "http://www.nevillegrech.com/madmax-oopsla18.pdf",
  "author_full_name": "Adrian Colyer",
  "source_website": "https://blog.acolyer.org/about/",
  "id": 57613420
}